#!/usr/bin/python

# This tool generates a part of a json file which is needed for test-suite-score.
# The tool reads the first number as revision number from the name of the .txt file and the code element names from the file.
# Fails file contains revision number and total failed testcase

import argparse
import os
import json

# main function
def main():
    parser = argparse.ArgumentParser(description='Selected-revs-gen tool generates elements of the selected-revisions array of test-suite-score json file.')
    parser.add_argument('-o', '--output', required=True, help='Output file path and name.')
    parser.add_argument('-f', '--fail', required=True, help='Path to the fail.csv file generated by test-selection-statistics')
    parser.add_argument('-s', '--source-directory', required=True, help='Path to the directory where the text files contains the failed code element names and the name of the file contains the revision number')

    generateJson(parser.parse_args())

# reads revision; fail data from fails statistics
def readFails(path):
    fail = dict()
    with open(path) as f:
        nOfRevs = f.readline()
        nOfRevs = int(nOfRevs.split(';')[1])
        for x in range(0, nOfRevs + 3):
            line = f.readline()
            if x < 3:
                continue
            line = line.split(';')
            fail[line[0]] = int(line[1]) #revision ; fails

    return fail


# reads failed code element names from file
def readCodeElementNames(path):
    failedCodeElements = list()
    with open(path) as f:
        for line in f:
            failedCodeElements.append(line.strip())

    return failedCodeElements

# generates part of json file for test-suite-score
def generateJson(args):
    revCount = 0
    of = open(args.output + '.json', 'w')
    fail = readFails(args.fail)

    for dirpath, dirnames, filenames in os.walk(args.source_directory):
        for file in filenames:
            # name splitting
            name, ext = os.path.splitext(file)
            if ext != '.txt':
                continue

            revision = ''
            digit = False
            # revision number
            for c in name:
                if not digit and c.isdigit():
                    digit = True

                if digit and not c.isdigit():
                    break

                if digit:
                    revision += c

            # code element names from file
            failedCodeElements = readCodeElementNames(os.path.join(dirpath, file))

            if revision == '':
                continue

            # json format
            of.write(json.dumps({ "revision": revision ,"failed-code-elements": failedCodeElements,"total-failed-testcases": fail[revision] }, separators=(',',': '), indent=4, sort_keys=False))
            of.write(',\n')
            revCount += 1

    of.close()
    print(str(revCount) + ' selected revisions generated...')

if __name__ == '__main__':
    main()
