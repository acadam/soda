/*
 * Copyright (C): 2013-2015 Department of Software Engineering, University of Szeged
 *
 * Authors: David Tengeri <dtengeri@inf.u-szeged.hu>
 *
 * This file is part of SoDA.
 *
 *  SoDA is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  SoDA is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with SoDA.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <iostream>
#include <fstream>
#include <ctype.h>

#include "boost/algorithm/string.hpp"
#include "boost/property_tree/ptree.hpp"
#include "boost/property_tree/xml_parser.hpp"
#include "boost/foreach.hpp"
#include "boost/regex.hpp"
#include "exception/CException.h"
#include "JacocoJavaCoverageReaderPlugin.h"

namespace pt = boost::property_tree;

namespace soda {

JacocoJavaCoverageReaderPlugin::JacocoJavaCoverageReaderPlugin() :
    m_coverage(NULL)
{}

JacocoJavaCoverageReaderPlugin::~JacocoJavaCoverageReaderPlugin()
{}

std::string JacocoJavaCoverageReaderPlugin::getName()
{
    return "jacoco-java";
}

std::string JacocoJavaCoverageReaderPlugin::getDescription()
{
    return "Reads coverage from XML files generated by Jacoco.";
}

CCoverageMatrix* JacocoJavaCoverageReaderPlugin::read(const variables_map &vm)
{
    // Set the required granularity level
    String granularity = vm["granularity"].as<String>();
    if (granularity == "package") {
        m_granularity = PACKAGE;
    } else if (granularity == "src") {
        m_granularity = SRC;
    } else if (granularity == "class") {
        m_granularity = CLASS;
    } else {
        m_granularity = METHOD;
    }

    std::cerr << "Granularity: " << m_granularity << std::endl << std::endl;
    m_coverage = new CCoverageMatrix();
    readFromDirectoryStructure(vm["path"].as<String>());
    return m_coverage;
}

static void cutExtension(std::string& str)
{
    size_t b = str.find_last_of('.');
    if (b != std::string::npos) {
        str.erase(b);
    }
}

void JacocoJavaCoverageReaderPlugin::readFromDirectoryStructure(const char * dirname)
{
    fs::path coverage_path(dirname);
    if (!(exists(coverage_path) && is_directory(coverage_path))) {
        throw CException("JacocoJavaCoverageReaderPlugin::readFromDirectoryStructure()", "Specified path does not exists or is not a directory.");
    }

    size_t cutsize = coverage_path.generic_string().length() + ((*(coverage_path.generic_string().rbegin()) == '/') ? 0 : 1);
    //readFromDirectory1stPass(coverage_path, cutsize);
    //m_coverage->refitMatrixSize();
    readFromDirectory(coverage_path, cutsize);
}

void JacocoJavaCoverageReaderPlugin::readFromDirectoryStructure(const std::string& dirname)
{
    readFromDirectoryStructure(dirname.c_str());
}

void JacocoJavaCoverageReaderPlugin::readFromDirectory1stPass(fs::path p, size_t cut)
{
    static int info_tcnt = 0; //INFO
    static int info_tmax = 0;
    int info_cnt = 0; //INFO
    int info_max;

    std::cout << "Directory: " << p << " 1st pass" << std::endl;
    std::cout.flush();

    std::vector<fs::path> pathVector;
    std::copy(fs::directory_iterator(p), fs::directory_iterator(), back_inserter(pathVector));
    std::sort(pathVector.begin(), pathVector.end());
    info_tmax += info_max = pathVector.size();

    for (std::vector<fs::path>::iterator it = pathVector.begin(); it != pathVector.end(); it++) {
        if (is_directory(*it)) { // recurse into subdirs
            if (basename(*it) != "") {
                readFromDirectory1stPass(*it, cut);
            } else {
                info_tmax--;
                info_max--;
            }
        } else {
            std::cout << info_cnt++ << "/" << info_max << ' ' << info_tcnt++ << "/" << info_tmax << '\r';
            std::cout.flush();

            std::ifstream in(it->string().c_str());

            // Process XML
            pt::ptree xml;
            pt::read_xml(in, xml);

            String tcname = xml.get<String>("<xmlcomment>");
            boost::algorithm::trim(tcname);
            m_coverage->addTestcaseName(tcname);

            BOOST_FOREACH(ptree::value_type &packageNode, xml.get_child("report")) {
                if (packageNode.first == "package") {
                    String packageName = packageNode.second.get<String>("<xmlattr>.name");

                    if (m_granularity == PACKAGE) {
                        m_coverage->addCodeElementName(packageName);
                        continue;
                    }
                    BOOST_FOREACH(ptree::value_type &node, packageNode.second.get_child("")) {
                        if ((m_granularity == CLASS || m_granularity == METHOD) && node.first == "class") {
                            String className = node.second.get<String>("<xmlattr>.name");

                            if (m_granularity == CLASS) {
                                m_coverage->addCodeElementName(className);
                                continue;
                            }
                            BOOST_FOREACH(ptree::value_type &methodNode, node.second.get_child("")) {
                                if (methodNode.first == "method") {
                                    std::stringstream codeElement;
                                    codeElement << className << "/" << methodNode.second.get<String>("<xmlattr>.name") << methodNode.second.get<String>("<xmlattr>.desc");

                                    m_coverage->addCodeElementName(codeElement.str());
                                    continue;
                                }
                            }

                        } else if (m_granularity == SRC && node.first == "sourcefile") {
                            String srcName = node.second.get<String>("<xmlattr>.name");
                            std::stringstream codeElement;
                            codeElement << packageName << "/" << srcName;
                            m_coverage->addCodeElementName(codeElement.str());
                            continue;
                        }

                    }
                }
            }
            in.close();
        }
    }
}

void JacocoJavaCoverageReaderPlugin::readFromDirectory(fs::path p, size_t cut)
{
    static int info_tcnt = 0; //INFO
    static int info_tmax = 0;
    int info_cnt = 0; //INFO
    int info_max;

    std::cout << "Directory: " << p << std::endl;
    std::cout.flush();

    std::vector<fs::path> pathVector;
    std::copy(fs::directory_iterator(p), fs::directory_iterator(), back_inserter(pathVector));
    std::sort(pathVector.begin(), pathVector.end());
    info_tmax += info_max = pathVector.size();

    for (std::vector<fs::path>::iterator it = pathVector.begin(); it != pathVector.end(); it++) {
        if (is_directory(*it)) { // recurse into subdirs
            if (basename(*it) != "") {
                readFromDirectory(*it, cut);
            } else {
                info_tmax--;
                info_max--;
            }
        } else {
            std::cout << info_cnt++ << "/" << info_max << ' ' << info_tcnt++ << "/" << info_tmax << '\r';
            std::cout.flush();

            std::ifstream in(it->string().c_str());

            // Process XML
            pt::ptree xml;
            pt::read_xml(in, xml);

            String tcname = xml.get<String>("<xmlcomment>");
            boost::algorithm::trim(tcname);

            BOOST_FOREACH(ptree::value_type &packageNode, xml.get_child("report")) {
                if (packageNode.first == "package") {
                    String packageName = packageNode.second.get<String>("<xmlattr>.name");

                    BOOST_FOREACH(ptree::value_type &node, packageNode.second.get_child("")) {
                        if (m_granularity == PACKAGE && node.first == "counter" && node.second.get<String>("<xmlattr>.type") == "METHOD") {
                            m_coverage->addOrSetRelation(tcname, packageName, (node.second.get<String>("<xmlattr>.covered") != "0"));
                            break;
                        }

                        if ((m_granularity == CLASS || m_granularity == METHOD) && node.first == "class") {
                            String className = node.second.get<String>("<xmlattr>.name");

                            BOOST_FOREACH(ptree::value_type &methodNode, node.second.get_child("")) {
                                if (m_granularity == CLASS && methodNode.first == "counter" && methodNode.second.get<String>("<xmlattr>.type") == "METHOD") {
                                    m_coverage->addOrSetRelation(tcname, className, (methodNode.second.get<String>("<xmlattr>.covered") != "0"));
                                    break;
                                }

                                if (m_granularity == METHOD && methodNode.first == "method") {
                                    std::stringstream codeElement;
                                    codeElement << className << "/" << methodNode.second.get<String>("<xmlattr>.name") << methodNode.second.get<String>("<xmlattr>.desc");

                                    BOOST_FOREACH(ptree::value_type &counterNode, methodNode.second.get_child("")) {
                                        if (counterNode.first == "counter" && counterNode.second.get<String>("<xmlattr>.type") == "METHOD") {
                                            m_coverage->addOrSetRelation(tcname, codeElement.str(), (counterNode.second.get<String>("<xmlattr>.covered") != "0"));
                                            break;
                                        }
                                    }
                                }
                            }

                        } else if (m_granularity == SRC && node.first == "sourcefile") {
                            String srcName = node.second.get<String>("<xmlattr>.name");
                            std::stringstream codeElement;
                            codeElement << packageName << "/" << srcName;

                            BOOST_FOREACH(ptree::value_type &counterNode, node.second.get_child("")) {
                                if (counterNode.first == "counter" && counterNode.second.get<String>("<xmlattr>.type") == "METHOD") {
                                    m_coverage->addOrSetRelation(tcname, codeElement.str(), (counterNode.second.get<String>("<xmlattr>.covered") != "0"));
                                    break;
                                }
                            }
                        }

                    }
                }
            }
            in.close();
        }
    }
}


extern "C" MSDLL_EXPORT void registerPlugin(CKernel &kernel)
{
    kernel.getCoverageReaderPluginManager().addPlugin(new JacocoJavaCoverageReaderPlugin());
}

} /* namespace soda */
