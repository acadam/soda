/*
 * Copyright (C): 2017 Department of Software Engineering, University of Szeged
 *
 * Authors: Tam√°s Gergely <gertom@inf.u-szeged.hu>
 *
 * This file is part of SoDA.
 *
 *  SoDA is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  SoDA is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with SoDA.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <iostream>
#include <fstream>
#include <ctype.h>

#include "boost/algorithm/string.hpp"
#include "boost/property_tree/ptree.hpp"
#include "boost/property_tree/xml_parser.hpp"
#include "boost/foreach.hpp"
#include "boost/regex.hpp"
#include "exception/CException.h"
#include "IstanbulJsCoverageReaderPlugin.h"
#include "rapidjson/document.h"
#include "rapidjson/istreamwrapper.h"

namespace pt = boost::property_tree;

namespace soda {

IstanbulJsCoverageReaderPlugin::IstanbulJsCoverageReaderPlugin() :
    m_coverage(NULL)
{}

IstanbulJsCoverageReaderPlugin::~IstanbulJsCoverageReaderPlugin()
{}

std::string IstanbulJsCoverageReaderPlugin::getName()
{
    return "istanbul-js";
}

std::string IstanbulJsCoverageReaderPlugin::getDescription()
{
    return "Reads coverage from JSON files generated by Istanbul.";
}

CCoverageMatrix* IstanbulJsCoverageReaderPlugin::read(const variables_map &vm)
{
    m_codeElementNameFilter.assign(vm["cut-source-path"].as<String>());
    // Set the required granularity level
    if (vm.count("granularity")) {
        String granularity = vm["granularity"].as<String>();
        if (granularity == "branch") {
            m_granularity = BRANCH;
        } else if (granularity == "statement") {
            m_granularity = STATEMENT;
        }
    } else {
        m_granularity = METHOD;
    }

    std::cerr << "Granularity: " << m_granularity << std::endl << std::endl;
    m_coverage = new CCoverageMatrix();
    readFromDirectoryStructure(vm["path"].as<String>());
    return m_coverage;
}

static void cutExtension(std::string& str)
{
    size_t b = str.find_last_of('.');
    if (b != std::string::npos) {
        str.erase(b);
    }
}

void IstanbulJsCoverageReaderPlugin::readFromDirectoryStructure(const char * dirname)
{
    fs::path coverage_path(dirname);
    if (!(exists(coverage_path) && is_directory(coverage_path))) {
        throw CException("IstanbulJsCoverageReaderPlugin::readFromDirectoryStructure()", "Specified path does not exists or is not a directory.");
    }

    size_t cutsize = coverage_path.generic_string().length() + ((*(coverage_path.generic_string().rbegin()) == '/') ? 0 : 1);
    readFromDirectory(coverage_path, cutsize);
}

void IstanbulJsCoverageReaderPlugin::readFromDirectoryStructure(const std::string& dirname)
{
    readFromDirectoryStructure(dirname.c_str());
}

static void readFunctionCoverage(std::string &tcname, rapidjson::Document &json, CCoverageMatrix *cmx, boost::regex& path_filter) {
    for (rapidjson::Value::ConstMemberIterator itr = json.MemberBegin(); itr != json.MemberEnd(); ++itr) {
        String srcname = itr->name.GetString();
        srcname = boost::regex_replace(srcname, path_filter, "");

        rapidjson::Value::ConstMemberIterator map_val_it = itr->value.FindMember("fnMap");
        std::map<int, std::string> item_mapping;

        for (rapidjson::Value::ConstMemberIterator mapit = map_val_it->value.MemberBegin(); mapit != map_val_it->value.MemberEnd(); ++mapit) {
            int serial = std::stoi(mapit->name.GetString());
            std::string fname = mapit->value["name"].GetString();
            item_mapping[serial] = fname;
        }

        rapidjson::Value::ConstMemberIterator cov_val_it = itr->value.FindMember("f");

        for (rapidjson::Value::ConstMemberIterator covit = cov_val_it->value.MemberBegin(); covit != cov_val_it->value.MemberEnd(); ++covit) {
            int ser = std::stoi(covit->name.GetString());
            int cov = covit->value.GetInt();
            cmx->addOrSetRelation(tcname, srcname + ':' + item_mapping[ser], cov > 0);
        }
    }

}

void IstanbulJsCoverageReaderPlugin::readFromDirectory(fs::path p, size_t cut)
{
    static int info_tcnt = 0; //INFO
    static int info_tmax = 0;
    int info_cnt = 0; //INFO
    int info_max;

    std::cout << "Directory: " << p << std::endl;
    std::cout.flush();

    std::vector<fs::path> pathVector;
    std::copy(fs::directory_iterator(p), fs::directory_iterator(), back_inserter(pathVector));
    std::sort(pathVector.begin(), pathVector.end());
    info_tmax += info_max = pathVector.size();

    for (std::vector<fs::path>::iterator it = pathVector.begin(); it != pathVector.end(); it++) {
        if (is_directory(*it)) { // recurse into subdirs
            if (basename(*it) != "") {
                readFromDirectory(*it, cut);
            } else {
                info_tmax--;
                info_max--;
            }
        } else {
            std::cout << info_cnt++ << "/" << info_max << ' ' << info_tcnt++ << "/" << info_tmax << '\r';
            std::cout.flush();

            std::ifstream ins(it->string().c_str());
            rapidjson::IStreamWrapper isw(ins);
            rapidjson::Document json;
            json.ParseStream(isw);

            if(!json.IsObject()) {
                continue;
            }
            String tcname = basename(*it);
            boost::algorithm::trim(tcname);
            switch (m_granularity) {
                case METHOD: readFunctionCoverage(tcname, json, m_coverage, m_codeElementNameFilter); break;
                default: break;
            }
        }
    }
}


extern "C" MSDLL_EXPORT void registerPlugin(CKernel &kernel)
{
    kernel.getCoverageReaderPluginManager().addPlugin(new IstanbulJsCoverageReaderPlugin());
}

} /* namespace soda */
