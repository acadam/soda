/*
 * Copyright (C): 2013-2015 Department of Software Engineering, University of Szeged
 *
 * Authors: David Tengeri <dtengeri@inf.u-szeged.hu>
 *
 * This file is part of SoDA.
 *
 *  SoDA is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  SoDA is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with SoDA.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <iostream>
#include <fstream>
#include <ctype.h>

#include "boost/property_tree/ptree.hpp"
#include "boost/property_tree/xml_parser.hpp"
#include "boost/foreach.hpp"
#include "boost/regex.hpp"
#include "exception/CException.h"
#include "EmmaJavaCoverageReaderPlugin.h"

namespace pt = boost::property_tree;

namespace soda {

EmmaJavaCoverageReaderPlugin::EmmaJavaCoverageReaderPlugin() :
    m_coverage(NULL)
{}

EmmaJavaCoverageReaderPlugin::~EmmaJavaCoverageReaderPlugin()
{}

std::string EmmaJavaCoverageReaderPlugin::getName()
{
    return "emma-java";
}

std::string EmmaJavaCoverageReaderPlugin::getDescription()
{
    return "Reads coverage from XML files generated by EMMA.";
}

CCoverageMatrix* EmmaJavaCoverageReaderPlugin::read(const variables_map &vm)
{
    // Set the required granularity level
    String granularity = vm["granularity"].as<String>();
    if (granularity == "package") {
        m_granularity = PACKAGE;
    } else if (granularity == "src") {
        m_granularity = SRC;
    } else if (granularity == "class") {
        m_granularity = CLASS;
    } else {
        m_granularity = METHOD;
    }

    std::cerr << "Granularity: " << m_granularity << std::endl << std::endl;
    m_coverage = new CCoverageMatrix();
    readFromDirectoryStructure(vm["path"].as<String>());
    return m_coverage;
}

static void cutExtension(std::string& str)
{
    size_t b = str.find_last_of('.');
    if (b != std::string::npos) {
        str.erase(b);
    }
}

void EmmaJavaCoverageReaderPlugin::readFromDirectoryStructure(const char * dirname)
{
    fs::path coverage_path(dirname);
    if (!(exists(coverage_path) && is_directory(coverage_path))) {
        throw CException("EmmaJavaCoverageReaderPlugin::readFromDirectoryStructure()", "Specified path does not exists or is not a directory.");
    }

    size_t cutsize = coverage_path.generic_string().length() + ((*(coverage_path.generic_string().rbegin()) == '/') ? 0 : 1);
    readFromDirectory1stPass(coverage_path, cutsize);
    m_coverage->refitMatrixSize();
    readFromDirectory(coverage_path, cutsize);
}

void EmmaJavaCoverageReaderPlugin::readFromDirectoryStructure(const std::string& dirname)
{
    readFromDirectoryStructure(dirname.c_str());
}

void EmmaJavaCoverageReaderPlugin::readFromDirectory1stPass(fs::path p, size_t cut)
{
    static int info_tcnt = 0; //INFO
    static int info_tmax = 0;
    int info_cnt = 0; //INFO
    int info_max;

    std::cout << "Directory: " << p << " 1st pass" << std::endl;
    std::cout.flush();

    std::vector<fs::path> pathVector;
    std::copy(fs::directory_iterator(p), fs::directory_iterator(), back_inserter(pathVector));
    std::sort(pathVector.begin(), pathVector.end());
    info_tmax += info_max = pathVector.size();

    bool readXML = true;

    for (std::vector<fs::path>::iterator it = pathVector.begin(); it != pathVector.end(); it++) {
        if (is_directory(*it)) { // recurse into subdirs
            if (basename(*it) != "") {
                readFromDirectory1stPass(*it, cut);
            } else {
                info_tmax--;
                info_max--;
            }
        } else {
            std::cout << info_cnt++ << "/" << info_max << ' ' << info_tcnt++ << "/" << info_tmax << '\r';
            std::cout.flush();

            std::string tcname = it->generic_string().substr(cut);
            cutExtension(tcname);
            m_coverage->addTestcaseName(tcname);

            // The EMMA xml report contains all code elements, we do not need to read all files in the 1st pass.
            if (!readXML) {
                continue;
            }

            std::ifstream in(it->string().c_str());
            std::string line;

            boost::regex packageStartExpr(".*<package .+>.*");
            boost::regex packageEndExpr(".*</package>.*");
            while (std::getline(in, line)) {
                // Skip first few lines
                if (!boost::regex_match(line, packageStartExpr)) {
                    continue;
                }
                std::stringstream xmlString;
                xmlString << line << std::endl;
                while (std::getline(in, line)) {
                    xmlString << line << std::endl;
                    if (boost::regex_match(line, packageEndExpr)) {
                        break;
                    }
                }

                // Process XML
                pt::ptree xml;
                pt::read_xml(xmlString, xml);

                String packageName = xml.get<String>("package.<xmlattr>.name");

                if (m_granularity == PACKAGE) {
                    m_coverage->addCodeElementName(packageName);
                    continue;
                }

                BOOST_FOREACH(ptree::value_type &srcFile, xml.get_child("package")) {
                    if (srcFile.first == "srcfile") {
                        String srcFileName = srcFile.second.get<String>("<xmlattr>.name");
                        if (m_granularity == SRC) {
                            std::stringstream codeElement;
                            codeElement << packageName << "." << srcFileName;

                            m_coverage->addCodeElementName(codeElement.str());
                            continue;
                        }

                        BOOST_FOREACH(ptree::value_type &classElement, srcFile.second.get_child("")) {
                            if (classElement.first == "class") {
                                String className = classElement.second.get<String>("<xmlattr>.name");
                                if (m_granularity == CLASS) {
                                    std::stringstream codeElement;
                                    codeElement << packageName << "." << className;

                                    m_coverage->addCodeElementName(codeElement.str());
                                    continue;
                                }


                                BOOST_FOREACH(ptree::value_type &method, classElement.second.get_child("")) {
                                    if (method.first == "method") {
                                        String methodName = method.second.get<String>("<xmlattr>.name");
                                        if (m_granularity == METHOD) {
                                            std::stringstream codeElement;
                                            codeElement << packageName << "." << className << "." << methodName;

                                            m_coverage->addCodeElementName(codeElement.str());
                                            continue;
                                        }
                                    }

                                }
                            }

                        }
                    }

                }
            }
            in.close();
            readXML = false;
        }
    }
}

void EmmaJavaCoverageReaderPlugin::readFromDirectory(fs::path p, size_t cut)
{
    static int info_tcnt = 0; //INFO
    static int info_tmax = 0;
    int info_cnt = 0; //INFO
    int info_max;

    std::cout << "Directory: " << p << std::endl;
    std::cout.flush();

    std::vector<fs::path> pathVector;
    std::copy(fs::directory_iterator(p), fs::directory_iterator(), back_inserter(pathVector));
    std::sort(pathVector.begin(), pathVector.end());
    info_tmax += info_max = pathVector.size();

    for (std::vector<fs::path>::iterator it = pathVector.begin(); it != pathVector.end(); it++) {
        if (is_directory(*it)) { // recurse into subdirs
            if (basename(*it) != "") {
                readFromDirectory1stPass(*it, cut);
            } else {
                info_tmax--;
                info_max--;
            }
        } else {
            std::cout << info_cnt++ << "/" << info_max << ' ' << info_tcnt++ << "/" << info_tmax << '\r';
            std::cout.flush();

            std::string tcname = it->generic_string().substr(cut);
            cutExtension(tcname);
            m_coverage->addTestcaseName(tcname);

            std::ifstream in(it->string().c_str());
            std::string line;

            boost::regex packageStartExpr(".*<package .+>.*");
            boost::regex packageEndExpr(".*</package>.*");
            while (std::getline(in, line)) {
                // Skip first few lines
                if (!boost::regex_match(line, packageStartExpr)) {
                    continue;
                }
                std::stringstream xmlString;
                xmlString << line << std::endl;
                while (std::getline(in, line)) {
                    xmlString << line << std::endl;
                    if (boost::regex_match(line, packageEndExpr)) {
                        break;
                    }
                }

                // Process XML
                pt::ptree xml;
                pt::read_xml(xmlString, xml);

                String packageName = xml.get<String>("package.<xmlattr>.name");

                std::stringstream codeElement;
                codeElement << packageName;
                bool covered = false;
                BOOST_FOREACH(ptree::value_type &srcFile, xml.get_child("package")) {
                    if (srcFile.first == "srcfile") {
                        String srcFileName = srcFile.second.get<String>("<xmlattr>.name");
                        if (m_granularity == SRC) {
                            codeElement.str(String());
                            codeElement.clear();
                            codeElement << packageName << "." << srcFileName;
                        }

                        BOOST_FOREACH(ptree::value_type &classElement, srcFile.second.get_child("")) {
                            if (classElement.first == "class") {
                                String className = classElement.second.get<String>("<xmlattr>.name");
                                if (m_granularity == CLASS) {
                                    codeElement.str(String());
                                    codeElement.clear();
                                    codeElement << packageName << "." << className;
                                }

                                BOOST_FOREACH(ptree::value_type &method, classElement.second.get_child("")) {
                                    if (method.first == "method") {
                                        String methodName = method.second.get<String>("<xmlattr>.name");

                                        if (m_granularity == METHOD) {
                                            codeElement.str(String());
                                            codeElement.clear();
                                            codeElement << packageName << "." << className << "." << methodName;
                                        }

                                        BOOST_FOREACH(ptree::value_type &coverage, method.second.get_child("coverage")) {
                                            if (coverage.second.get<String>("type") == "method, %") {
                                                String value = coverage.second.get<String>("value");
                                                if (value == "100% (1/1)") {
                                                    m_coverage->setRelation(tcname, codeElement.str(), true);
                                                    covered = true;
                                                }
                                                break;
                                            }
                                        }
                                        if (m_granularity < METHOD && covered) {
                                            break;
                                        }
                                    }
                                }
                                if (m_granularity < CLASS && covered) {
                                    break;
                                } else {
                                    covered = false;
                                }
                            }
                        }
                        if (m_granularity < SRC && covered) {
                            break;
                        } else {
                            covered = false;
                        }
                    }
                }
            }
            in.close();
        }
    }
}


extern "C" void registerPlugin(CKernel &kernel)
{
    kernel.getCoverageReaderPluginManager().addPlugin(new EmmaJavaCoverageReaderPlugin());
}

} /* namespace soda */
