        -:    0:Source:github/soda/src/lib/SoDA/src/io/filtered.cpp
        -:    0:Programs:17
        -:    1:/*
        -:    2: * Copyright (C): 2013-2014 Department of Software Engineering, University of Szeged
        -:    3: *
        -:    4: * Authors: David Tengeri <dtengeri@inf.u-szeged.hu>
        -:    5: *
        -:    6: * This file is part of SoDA.
        -:    7: *
        -:    8: *  SoDA is free software: you can redistribute it and/or modify
        -:    9: *  it under the terms of the GNU Lesser General Public License as published by
        -:   10: *  the Free Software Foundation, either version 3 of the License, or
        -:   11: *  (at your option) any later version.
        -:   12: *
        -:   13: *  SoDA is distributed in the hope that it will be useful,
        -:   14: *  but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   15: *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   16: *  GNU Lesser General Public License for more details.
        -:   17: *
        -:   18: *  You should have received a copy of the GNU Lesser General Public License
        -:   19: *  along with SoDA.  If not, see <http://www.gnu.org/licenses/>.
        -:   20: */
        -:   21:
        -:   22:#include <fstream>
        -:   23:#include <sstream>
        -:   24:#include <boost/filesystem.hpp>
        -:   25:#include "io/filtered.h"
        -:   26:#include "exception/CIOException.h"
        -:   27:
        -:   28:namespace soda { namespace io {
        -:   29:
        6:   30:filtered::filtered() :
        6:   31:    m_file(NULL)
        6:   32:{}
        -:   33:
       40:   34:filtered::filtered(const char *filename, eOpenMode mode) :
        -:   35:    m_file(NULL),
       40:   36:    m_mode(mode)
        -:   37:{
       40:   38:    open(filename, mode);
       39:   39:}
        -:   40:
        2:   41:filtered::filtered(const String &filename, eOpenMode mode) :
        -:   42:    m_file(NULL),
        2:   43:    m_mode(mode)
        -:   44:{
        2:   45:    open(filename, mode);
        2:   46:}
        -:   47:
       50:   48:filtered::~filtered()
        -:   49:{
       45:   50:    if (m_file != NULL) {
       43:   51:        delete m_file;
        -:   52:    }
       50:   53:}
        -:   54:
        4:   55:void filtered::open(const String &filename, eOpenMode mode)
        -:   56:{
        8:   57:    open(filename.c_str(), mode);
        3:   58:}
        -:   59:
       54:   60:void filtered::open(const char *filename, eOpenMode mode)
        -:   61:{
       54:   62:    if (m_file == NULL) {
       54:   63:        this->m_mode = mode;
        -:   64:        std::ios_base::openmode openMode;
        -:   65:
       54:   66:        switch (mode) {
        -:   67:        case omRead:
        -:   68:            openMode = std::ios_base::in | std::ios_base::binary;
        -:   69:            break;
        -:   70:        case omWrite:
       18:   71:            openMode = std::ios_base::out | std::ios_base::binary;
       18:   72:            break;
        -:   73:        default:
        -:   74:            openMode = std::ios_base::in | std::ios_base::binary;
        -:   75:            break;
        -:   76:        }
        -:   77:
        -:   78:        try {
        -:   79:            boost::filesystem::path p(filename);
      108:   80:            if(p.has_parent_path() && !(boost::filesystem::exists(p.parent_path()))) {
    #####:   81:                boost::filesystem::create_directory(p.parent_path());
        -:   82:            }
        -:   83:
       54:   84:            m_file = new std::fstream(filename, openMode);
      108:   85:            if (m_file->fail()) {
        2:   86:                delete m_file;
        2:   87:                m_file = NULL;
        8:   88:                throw CIOException("soda::io::BinaryIO::open()", "Can not open file: " + String(filename));
        -:   89:            }
    =====:   90:        } catch (std::ios_base::failure e) {
    =====:   91:            delete m_file;
    =====:   92:            m_file = NULL;
    =====:   93:            throw CIOException("soda::io::BinaryIO::open()", e.what());
        -:   94:        }
        -:   95:    }
       52:   96:}
        -:   97:
        -:   98:
    67469:   99:bool filtered::isOpen()
        -:  100:{
   134930:  101:    return m_file != NULL && m_file->is_open();
        -:  102:}
        -:  103:
        8:  104:void filtered::close()
        -:  105:{
        8:  106:    if (!isOpen()) {
        3:  107:        throw CIOException("soda::io::BinaryIO::close()", "The file is not open.");
        -:  108:    }
        -:  109:    try {
        7:  110:        m_file->close();
    =====:  111:    } catch (std::ios_base::failure e) {
    =====:  112:        throw CIOException("soda::io::BinaryIO::close()", e.what());
        -:  113:    }
        7:  114:    delete m_file;
        7:  115:    m_file = NULL;
        7:  116:}
        -:  117:
    50625:  118:bool filtered::eof()
        -:  119:{
   101250:  120:    return m_file != NULL && m_file->eof();
        -:  121:}
        -:  122:
      203:  123:void filtered::writeBool1(bool b)
        -:  124:{
      203:  125:    if (!isWritable()) {
        6:  126:        throw CIOException("soda::io::BinaryIO::writeBool1()", "The file is not writable");
        -:  127:    }
      201:  128:    char c = b ? 1 : 0;
        -:  129:    try {
      201:  130:        m_file->write(&c, 1);
    =====:  131:    } catch (std::ios_base::failure e) {
    =====:  132:        throw CIOException("soda::io::BinaryIO::writeBool1()", e.what());
        -:  133:    }
      201:  134:}
        -:  135:
      763:  136:bool filtered::readBool1()
        -:  137:{
      763:  138:    if (!isReadable()) {
        6:  139:        throw CIOException("soda::io::BinaryIO::readBool1()", "The file is not readable");
        -:  140:    }
      761:  141:    char b = 0;
        -:  142:    try {
      761:  143:        m_file->read(&b, 1);
    =====:  144:    } catch (std::ios_base::failure e) {
    =====:  145:        throw CIOException("soda::io::BinaryIO::readBool1()", e.what());
        -:  146:    }
      761:  147:    return b == 1;
        -:  148:}
        -:  149:
     1928:  150:void filtered::writeByte1(char c)
        -:  151:{
     1928:  152:    if (!isWritable()) {
        3:  153:        throw CIOException("soda::io::BinaryIO::writeByte1()", "The file is not writable");
        -:  154:    }
        -:  155:    try {
     1927:  156:        m_file->write(&c, 1);
    =====:  157:    } catch (std::ios_base::failure e) {
    =====:  158:        throw CIOException("soda::io::BinaryIO::writeByte1()", e.what());
        -:  159:    }
     1927:  160:}
        -:  161:
    53172:  162:char filtered::readByte1()
        -:  163:{
    53172:  164:    if (!isReadable()) {
        3:  165:        throw CIOException("soda::io::BinaryIO::readByte1()", "The file is not readable");
        -:  166:    }
        -:  167:    char c;
        -:  168:    try {
    53171:  169:        m_file->read(&c, 1);
    =====:  170:    } catch (std::ios_base::failure e) {
    =====:  171:        throw CIOException("soda::io::BinaryIO::readByte1()", e.what());
        -:  172:    }
        -:  173:
    53171:  174:    return c;
        -:  175:}
        -:  176:
        2:  177:void filtered::writeUByte1(unsigned char c)
        -:  178:{
        2:  179:    if (!isWritable()) {
        3:  180:        throw CIOException("soda::io::BinaryIO::writeUByte1()", "The file is not writable");
        -:  181:    }
        -:  182:    try {
        1:  183:        m_file->write((char *)&c, 1);
    =====:  184:    } catch (std::ios_base::failure e) {
    =====:  185:        throw CIOException("soda::io::BinaryIO::writeUByte1()", e.what());
        -:  186:    }
        1:  187:}
        -:  188:
        2:  189:unsigned char filtered::readUByte1()
        -:  190:{
        2:  191:    if (!isReadable()) {
        3:  192:        throw CIOException("soda::io::BinaryIO::readUByte1()", "The file is not readable");
        -:  193:    }
        -:  194:    unsigned char c;
        -:  195:    try {
        1:  196:        m_file->read((char *)&c, 1);
    =====:  197:    } catch (std::ios_base::failure e) {
    =====:  198:        throw CIOException("soda::io::BinaryIO::readUByte1()", e.what());
        -:  199:    }
        -:  200:
        1:  201:    return c;
        -:  202:}
        -:  203:
        6:  204:void filtered::writeInt4(int i)
        -:  205:{
        6:  206:    if (!isWritable()) {
        3:  207:        throw CIOException("soda::io::BinaryIO::writeInt4()", "The file is not writable");
        -:  208:    }
        -:  209:    try {
        5:  210:        m_file->write((char *)&i, 4);
    =====:  211:    } catch (std::ios_base::failure e) {
    =====:  212:        throw CIOException("soda::io::BinaryIO::writeInt4()", e.what());
        -:  213:    }
        5:  214:}
        -:  215:
       85:  216:int filtered::readInt4()
        -:  217:{
       85:  218:    if (!isReadable()) {
        3:  219:        throw CIOException("soda::io::BinaryIO::readInt4()", "The file is not readable");
        -:  220:    }
        -:  221:    int i;
        -:  222:    try {
       84:  223:        m_file->read((char *)&i, 4);
    =====:  224:    } catch (std::ios_base::failure e) {
    =====:  225:        throw CIOException("soda::io::BinaryIO::readInt4()", e.what());
        -:  226:    }
        -:  227:
       84:  228:    return i;
        -:  229:}
        -:  230:
       69:  231:void filtered::writeUInt4(unsigned i)
        -:  232:{
       69:  233:    if (!isWritable()) {
        3:  234:        throw CIOException("soda::io::BinaryIO::writeUInt4()", "The file is not writable");
        -:  235:    }
        -:  236:    try {
       68:  237:        m_file->write((char *)&i, 4);
    =====:  238:    } catch (std::ios_base::failure e) {
    =====:  239:        throw CIOException("soda::io::BinaryIO::writeUInt4()", e.what());
        -:  240:    }
       68:  241:}
        -:  242:
       73:  243:unsigned filtered::readUInt4()
        -:  244:{
       73:  245:    if (!isReadable()) {
        3:  246:        throw CIOException("soda::io::BinaryIO::readUInt4()", "The file is not readable");
        -:  247:    }
        -:  248:    unsigned i;
        -:  249:    try {
       72:  250:        m_file->read((char *)&i, 4);
    =====:  251:    } catch (std::ios_base::failure e) {
    =====:  252:        throw CIOException("soda::io::BinaryIO::readUInt4()", e.what());
        -:  253:    }
        -:  254:
       72:  255:    return i;
        -:  256:}
        -:  257:
     1772:  258:void filtered::writeLongLong8(long long i)
        -:  259:{
     1772:  260:    if (!isWritable()) {
        3:  261:        throw CIOException("soda::io::BinaryIO::writeLongLong8()", "The file is not writable");
        -:  262:    }
        -:  263:    try {
     1771:  264:        m_file->write((char *)&i, 8);
    =====:  265:    } catch (std::ios_base::failure e) {
    =====:  266:        throw CIOException("soda::io::BinaryIO::writeLongLong8()", e.what());
        -:  267:    }
     1771:  268:}
        -:  269:
     3676:  270:long long filtered::readLongLong8()
        -:  271:{
     3676:  272:    if (!isReadable()) {
        3:  273:        throw CIOException("soda::io::BinaryIO::readLongLong8()", "The file is not readable");
        -:  274:    }
        -:  275:    long long i;
        -:  276:    try {
     3675:  277:        m_file->read((char *)&i, 8);
    =====:  278:    } catch (std::ios_base::failure e) {
    =====:  279:        throw CIOException("soda::io::BinaryIO::readLongLong8()", e.what());
        -:  280:    }
        -:  281:
     3675:  282:    return i;
        -:  283:}
        -:  284:
       51:  285:void filtered::writeULongLong8(unsigned long long i)
        -:  286:{
       51:  287:    if (!isWritable()) {
        3:  288:        throw CIOException("soda::io::BinaryIO::writeULongLong8()", "The file is not writable");
        -:  289:    }
        -:  290:    try {
       50:  291:        m_file->write((char *)&i, 8);
    =====:  292:    } catch (std::ios_base::failure e) {
    =====:  293:        throw CIOException("soda::io::BinaryIO::writeULongLong8()", e.what());
        -:  294:    }
       50:  295:}
        -:  296:
      119:  297:unsigned long long filtered::readULongLong8()
        -:  298:{
      119:  299:    if (!isReadable()) {
        3:  300:        throw CIOException("soda::io::BinaryIO::readULongLong8()", "The file is not readable");
        -:  301:    }
        -:  302:    unsigned long long i;
        -:  303:    try {
      118:  304:        m_file->read((char *)&i, 8);
    =====:  305:    } catch (std::ios_base::failure e) {
    =====:  306:        throw CIOException("soda::io::BinaryIO::readULongLong8()", e.what());
        -:  307:    }
        -:  308:
      118:  309:    return i;
        -:  310:}
        -:  311:
     1767:  312:void filtered::writeString(const String &s)
        -:  313:{
     1767:  314:    if (!isWritable()) {
        3:  315:        throw CIOException("soda::io::BinaryIO::writeString()", "The file is not writable");
        -:  316:    }
     1766:  317:    size_t len = s.size();
        -:  318:    try {
     1766:  319:      m_file->write(s.c_str(),(std::streamsize)len+1);
    =====:  320:    } catch(std::ios_base::failure e) {
    =====:  321:      throw CIOException("soda::io::BinaryIO::writeString()", e.what());
        -:  322:    }
     1766:  323:}
        -:  324:
     3660:  325:const String filtered::readString()
        -:  326:{
     3660:  327:    if (!isReadable()) {
        3:  328:        throw CIOException("soda::io::BinaryIO::readString()", "The file is not readable");
        -:  329:    }
        -:  330:    try {
     3659:  331:      std::stringbuf ss;
     3659:  332:      int testNotEmpty = m_file->peek();
     3659:  333:      if (testNotEmpty){
     3659:  334:        m_file->get(ss, '\0');
        -:  335:      }
        -:  336:      // read string end 0
     3659:  337:      m_file->get();
     3659:  338:      return ss.str();
    =====:  339:    } catch(std::ios_base::failure e) {
    =====:  340:      throw CIOException("soda::io::BinaryIO::readString()", e.what());
        -:  341:    }
        -:  342:}
        -:  343:
       33:  344:void filtered::writeData(const void *data, std::streamsize size)
        -:  345:{
       33:  346:    if (!isWritable()) {
        3:  347:        throw CIOException("soda::io::BinaryIO::writeData()", "The file is not writable");
        -:  348:    }
        -:  349:    try {
       32:  350:        m_file->write((char *)data, size);
    =====:  351:    } catch(std::ios_base::failure e) {
    =====:  352:      throw CIOException("soda::io::BinaryIO::writeData()", e.what());
        -:  353:    }
       32:  354:}
        -:  355:
       57:  356:void filtered::readData(void *data, std::streamsize size)
        -:  357:{
       57:  358:    if (!isReadable()) {
        3:  359:        throw CIOException("soda::io::BinaryIO::readData()", "The file is not readable");
        -:  360:    }
        -:  361:    try {
       56:  362:      m_file->read((char *)data, size);
    =====:  363:    } catch(std::ios_base::failure e) {
    =====:  364:      throw CIOException("soda::io::BinaryIO::readData()", e.what());
        -:  365:    }
       56:  366:}
        -:  367:
     5831:  368:bool filtered::isWritable()
        -:  369:{
     5831:  370:    if (isOpen() && m_mode == omWrite) {
        -:  371:        return true;
        -:  372:    }
       10:  373:    return false;
        -:  374:}
        -:  375:
    61607:  376:bool filtered::isReadable()
        -:  377:{
    61607:  378:    if (isOpen() && m_mode == omRead) {
        -:  379:        return true;
        -:  380:    }
       10:  381:    return false;
        -:  382:}
        -:  383:
        -:  384:} /* namespace io */
        -:  385:
        3:  386:} /* namespace soda */
